using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using RoslynWebApi.Models;
using RoslynWebApi.Services;
using System.Reflection;

namespace RoslynWebApi.Controllers;

/// <summary>
/// Controller for health checks and system information
/// </summary>
[ApiController]
[Route("api/v1/[controller]")]
[Produces("application/json")]
public class HealthController : ControllerBase
{
    private readonly HealthCheckService _healthCheckService;
    private readonly IMetricsService _metricsService;
    private readonly ILogger<HealthController> _logger;

    public HealthController(
        HealthCheckService healthCheckService,
        IMetricsService metricsService,
        ILogger<HealthController> logger)
    {
        _healthCheckService = healthCheckService;
        _metricsService = metricsService;
        _logger = logger;
    }

    /// <summary>
    /// Gets basic health status of the API
    /// </summary>
    /// <returns>Health status</returns>
    [HttpGet]
    public async Task<ActionResult<HealthResponse>> GetHealth()
    {
        try
        {
            _logger.LogInformation("Health check requested");
            
            var healthReport = await _healthCheckService.CheckHealthAsync();
            
            var response = new HealthResponse
            {
                Status = healthReport.Status.ToString(),
                TotalDuration = healthReport.TotalDuration,
                Checks = healthReport.Entries.ToDictionary(
                    kvp => kvp.Key,
                    kvp => new HealthCheckResult
                    {
                        Status = kvp.Value.Status.ToString(),
                        Description = kvp.Value.Description,
                        Duration = kvp.Value.Duration,
                        Data = kvp.Value.Data?.ToDictionary(x => x.Key, x => x.Value),
                        Exception = kvp.Value.Exception?.Message
                    })
            };

            return Ok(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error performing health check");
            return StatusCode(500, new HealthResponse
            {
                Status = "Unhealthy",
                Checks = new Dictionary<string, HealthCheckResult>
                {
                    ["system"] = new HealthCheckResult
                    {
                        Status = "Unhealthy",
                        Exception = ex.Message
                    }
                }
            });
        }
    }

    /// <summary>
    /// Gets detailed system metrics and performance data
    /// </summary>
    /// <returns>System metrics</returns>
    [HttpGet("metrics")]
    public async Task<ActionResult<ApiResponse<MetricsResponse>>> GetMetrics()
    {
        try
        {
            _logger.LogInformation("Metrics requested");
            
            var metrics = await _metricsService.GetMetricsAsync();
            
            return Ok(ApiResponse<MetricsResponse>.CreateSuccess(metrics, 0, HttpContext.TraceIdentifier));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving metrics");
            return StatusCode(500, ApiResponse<MetricsResponse>.CreateError($"Error retrieving metrics: {ex.Message}", HttpContext.TraceIdentifier));
        }
    }

    /// <summary>
    /// Gets API information and available endpoints
    /// </summary>
    /// <returns>API information</returns>
    [HttpGet("info")]
    public ActionResult<ApiResponse<ApiInfoResponse>> GetApiInfo()
    {
        try
        {
            _logger.LogInformation("API info requested");
            
            var assembly = Assembly.GetExecutingAssembly();
            var version = assembly.GetName().Version?.ToString() ?? "1.0.0";
            var buildTime = GetBuildTime(assembly);
            
            var apiInfo = new ApiInfoResponse
            {
                Name = "Roslyn Web API",
                Version = version,
                Description = "REST API for comprehensive Roslyn code analysis tools",
                BuildTime = buildTime,
                Environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Development",
                AvailableEndpoints = new Dictionary<string, string>
                {
                    ["/api/v1/roslyn/validate-file"] = "Validate C# files using Roslyn",
                    ["/api/v1/roslyn/extract-project-metadata"] = "Extract comprehensive project metadata",
                    ["/api/v1/roslyn/find-usages"] = "Find symbol references and usages",
                    ["/api/v1/roslyn/chunk-code"] = "Break down code into semantic chunks",
                    ["/api/v1/roslyn/analyze-structure"] = "Analyze code structure and patterns",
                    ["/api/v1/roslyn/generate-facts"] = "Generate factual code information",
                    ["/api/v1/roslyn/extract-symbol-graph"] = "Extract symbol relationship graph",
                    ["/api/v1/roslyn/chunk-multi-language"] = "Multi-language code chunking",
                    ["/api/v1/roslyn/extract-semantic-graph"] = "Extract unified semantic graph",
                    ["/api/v1/roslyn/extract-sql"] = "Extract SQL from C# code",
                    ["/api/v1/roslyn/analyze-xaml"] = "Analyze XAML files",
                    ["/api/v1/roslyn/analyze-mvvm"] = "Analyze MVVM relationships",
                    ["/api/v1/health"] = "Health check endpoint",
                    ["/api/v1/health/metrics"] = "System metrics",
                    ["/swagger"] = "API documentation",
                    ["/metrics"] = "Prometheus metrics"
                }
            };
            
            return Ok(ApiResponse<ApiInfoResponse>.CreateSuccess(apiInfo, 0, HttpContext.TraceIdentifier));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting API info");
            return StatusCode(500, ApiResponse<ApiInfoResponse>.CreateError($"Error getting API info: {ex.Message}", HttpContext.TraceIdentifier));
        }
    }

    /// <summary>
    /// Liveness probe for Kubernetes
    /// </summary>
    /// <returns>Simple OK response</returns>
    [HttpGet("live")]
    public IActionResult GetLiveness()
    {
        return Ok(new { status = "alive", timestamp = DateTime.UtcNow });
    }

    /// <summary>
    /// Readiness probe for Kubernetes
    /// </summary>
    /// <returns>Readiness status</returns>
    [HttpGet("ready")]
    public async Task<IActionResult> GetReadiness()
    {
        try
        {
            var healthReport = await _healthCheckService.CheckHealthAsync();
            
            if (healthReport.Status == HealthStatus.Healthy)
            {
                return Ok(new { status = "ready", timestamp = DateTime.UtcNow });
            }
            else
            {
                return StatusCode(503, new { status = "not ready", timestamp = DateTime.UtcNow });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Readiness check failed");
            return StatusCode(503, new { status = "not ready", error = ex.Message, timestamp = DateTime.UtcNow });
        }
    }

    private static DateTime GetBuildTime(Assembly assembly)
    {
        try
        {
            var attribute = assembly.GetCustomAttribute<System.Reflection.AssemblyMetadataAttribute>();
            if (attribute != null && attribute.Key == "BuildTime")
            {
                if (DateTime.TryParse(attribute.Value, out var buildTime))
                {
                    return buildTime;
                }
            }
            
            // Fallback to file creation time
            return File.GetCreationTimeUtc(assembly.Location);
        }
        catch
        {
            return DateTime.UtcNow;
        }
    }
}
